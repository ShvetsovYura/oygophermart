// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ShvetsovYura/oygophermart/internal/services (interfaces: OrderStorer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/ShvetsovYura/oygophermart/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderStorer is a mock of OrderStorer interface.
type MockOrderStorer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStorerMockRecorder
}

// MockOrderStorerMockRecorder is the mock recorder for MockOrderStorer.
type MockOrderStorerMockRecorder struct {
	mock *MockOrderStorer
}

// NewMockOrderStorer creates a new mock instance.
func NewMockOrderStorer(ctrl *gomock.Controller) *MockOrderStorer {
	mock := &MockOrderStorer{ctrl: ctrl}
	mock.recorder = &MockOrderStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStorer) EXPECT() *MockOrderStorerMockRecorder {
	return m.recorder
}

// AddNewOrder mocks base method.
func (m *MockOrderStorer) AddNewOrder(arg0 context.Context, arg1 int64, arg2, arg3 string, arg4 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewOrder", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewOrder indicates an expected call of AddNewOrder.
func (mr *MockOrderStorerMockRecorder) AddNewOrder(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewOrder", reflect.TypeOf((*MockOrderStorer)(nil).AddNewOrder), arg0, arg1, arg2, arg3, arg4)
}

// GetOrdersById mocks base method.
func (m *MockOrderStorer) GetOrdersByID(arg0 context.Context, arg1 string) ([]models.LoyaltyOrderModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByID", arg0, arg1)
	ret0, _ := ret[0].([]models.LoyaltyOrderModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersById indicates an expected call of GetOrdersById.
func (mr *MockOrderStorerMockRecorder) GetOrdersByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByID", reflect.TypeOf((*MockOrderStorer)(nil).GetOrdersByID), arg0, arg1)
}

// GetUserByLogin mocks base method.
func (m *MockOrderStorer) GetUserByLogin(arg0 context.Context, arg1 string) (*models.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", arg0, arg1)
	ret0, _ := ret[0].(*models.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockOrderStorerMockRecorder) GetUserByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockOrderStorer)(nil).GetUserByLogin), arg0, arg1)
}

// GetUserOrders mocks base method.
func (m *MockOrderStorer) GetUserOrders(arg0 context.Context, arg1 string) ([]models.LoyaltyOrderModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", arg0, arg1)
	ret0, _ := ret[0].([]models.LoyaltyOrderModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockOrderStorerMockRecorder) GetUserOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockOrderStorer)(nil).GetUserOrders), arg0, arg1)
}
